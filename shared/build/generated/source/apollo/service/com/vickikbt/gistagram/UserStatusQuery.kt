//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.vickikbt.gistagram

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.vickikbt.gistagram.adapter.UserStatusQuery_ResponseAdapter
import com.vickikbt.gistagram.adapter.UserStatusQuery_VariablesAdapter
import com.vickikbt.gistagram.selections.UserStatusQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Unit

public data class UserStatusQuery(
  public val userLogin: String
) : Query<UserStatusQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    UserStatusQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> {
    return UserStatusQuery_ResponseAdapter.Data.obj()
  }

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.vickikbt.gistagram.type.Query.type
  )
  .selections(selections = UserStatusQuerySelections.root)
  .build()

  public data class Data(
    /**
     * The currently authenticated user.
     */
    public val viewer: Viewer
  ) : Query.Data

  public data class Viewer(
    public val id: String,
    /**
     * The username used to login.
     */
    public val login: String,
    /**
     * A URL pointing to the user's public avatar.
     */
    public val avatarUrl: Any,
    /**
     * Find Repository.
     */
    public val repository: Repository?
  )

  public data class Repository(
    public val id: String,
    /**
     * Returns whether or not this repository is empty.
     */
    public val isEmpty: Boolean,
    /**
     * The HTTP URL for this repository
     */
    public val url: Any
  )

  public companion object {
    public const val OPERATION_ID: String =
        "d41dad8627d536c18503bcb27a92570b6063333c2e21fcae2104e41fbd63bfa7"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query UserStatus($userLogin: String!) {
     *   viewer {
     *     id
     *     login
     *     avatarUrl
     *     repository(name: $userLogin) {
     *       id
     *       isEmpty
     *       url
     *     }
     *   }
     * }
     */
    public const val OPERATION_DOCUMENT: String =
        "query UserStatus(${'$'}userLogin: String!) { viewer { id login avatarUrl repository(name: ${'$'}userLogin) { id isEmpty url } } }"

    public const val OPERATION_NAME: String = "UserStatus"
  }
}
