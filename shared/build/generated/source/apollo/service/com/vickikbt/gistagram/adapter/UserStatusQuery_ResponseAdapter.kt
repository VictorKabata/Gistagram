//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.vickikbt.gistagram.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.vickikbt.gistagram.UserStatusQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object UserStatusQuery_ResponseAdapter {
  public object Data : Adapter<UserStatusQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("viewer")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        UserStatusQuery.Data {
      var viewer: UserStatusQuery.Viewer? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> viewer = Viewer.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return UserStatusQuery.Data(
        viewer = viewer!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: UserStatusQuery.Data
    ): Unit {
      writer.name("viewer")
      Viewer.obj().toJson(writer, customScalarAdapters, value.viewer)
    }
  }

  public object Viewer : Adapter<UserStatusQuery.Viewer> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "login", "avatarUrl", "repository")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        UserStatusQuery.Viewer {
      var id: String? = null
      var login: String? = null
      var avatarUrl: Any? = null
      var repository: UserStatusQuery.Repository? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> login = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> avatarUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> repository = Repository.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return UserStatusQuery.Viewer(
        id = id!!,
        login = login!!,
        avatarUrl = avatarUrl!!,
        repository = repository
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: UserStatusQuery.Viewer
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)

      writer.name("avatarUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatarUrl)

      writer.name("repository")
      Repository.obj().nullable().toJson(writer, customScalarAdapters, value.repository)
    }
  }

  public object Repository : Adapter<UserStatusQuery.Repository> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "isEmpty", "url")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        UserStatusQuery.Repository {
      var id: String? = null
      var isEmpty: Boolean? = null
      var url: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> isEmpty = BooleanAdapter.fromJson(reader, customScalarAdapters)
          2 -> url = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return UserStatusQuery.Repository(
        id = id!!,
        isEmpty = isEmpty!!,
        url = url!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: UserStatusQuery.Repository
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("isEmpty")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isEmpty)

      writer.name("url")
      AnyAdapter.toJson(writer, customScalarAdapters, value.url)
    }
  }
}
