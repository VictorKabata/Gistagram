//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.vickikbt.gistagram

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter
import com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_VariablesAdapter
import com.vickikbt.gistagram.selections.LoggedInUserProfileQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class LoggedInUserProfileQuery(
  public val organizationsCount: Int?,
  public val pinnedReposCount: Int?,
  public val languagesCount: Int?,
  public val reposCount: Int?,
  public val isFork: Boolean?
) : Query<LoggedInUserProfileQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    LoggedInUserProfileQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> {
    return LoggedInUserProfileQuery_ResponseAdapter.Data.obj()
  }

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.vickikbt.gistagram.type.Query.type
  )
  .selections(selections = LoggedInUserProfileQuerySelections.root)
  .build()

  public data class Data(
    /**
     * The currently authenticated user.
     */
    public val viewer: Viewer
  ) : Query.Data

  public data class Viewer(
    public val id: String,
    /**
     * The user's publicly visible profile email.
     */
    public val email: String,
    /**
     * The user's public profile name.
     */
    public val name: String?,
    /**
     * The username used to login.
     */
    public val login: String,
    /**
     * A URL pointing to the user's public avatar.
     */
    public val avatarUrl: Any,
    /**
     * The user's public profile bio.
     */
    public val bio: String?,
    /**
     * A URL pointing to the user's public website/blog.
     */
    public val websiteUrl: Any?,
    /**
     * The user's public profile company.
     */
    public val company: String?,
    /**
     * The user's public profile location.
     */
    public val location: String?,
    /**
     * The user's Twitter username.
     */
    public val twitterUsername: String?,
    /**
     * A list of users the given user is followed by.
     */
    public val followers: Followers,
    /**
     * A list of users the given user is following.
     */
    public val following: Following,
    /**
     * Whether or not this user is following the viewer. Inverse of viewer_is_following
     */
    public val isFollowingViewer: Boolean,
    /**
     * Whether or not this user is the viewing user.
     */
    public val isViewer: Boolean,
    /**
     * Whether or not this user is a participant in the GitHub Campus Experts Program.
     */
    public val isCampusExpert: Boolean,
    /**
     * Identifies the date and time when the object was created.
     */
    public val createdAt: Any,
    /**
     * A list of organizations the user belongs to.
     */
    public val organizations: Organizations,
    /**
     * A list of repositories and gists this profile owner has pinned to their profile
     */
    public val pinnedItems: PinnedItems,
    /**
     * A list of repositories that the user owns.
     */
    public val repositories: Repositories
  )

  public data class Followers(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int
  )

  public data class Following(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int
  )

  public data class Organizations(
    /**
     * A list of nodes.
     */
    public val nodes: List<Node?>?
  ) {
    public fun nodesFilterNotNull(): List<Node>? = nodes?.filterNotNull()
  }

  public data class Node(
    public val id: String,
    /**
     * The organization's public profile name.
     */
    public val name: String?,
    /**
     * A URL pointing to the organization's public avatar.
     */
    public val avatarUrl: Any
  )

  public data class PinnedItems(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int,
    /**
     * A list of nodes.
     */
    public val nodes: List<Node1?>?
  ) {
    public fun nodesFilterNotNull(): List<Node1>? = nodes?.filterNotNull()
  }

  public data class Node1(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on Repository
     */
    public val onRepository: OnRepository?
  )

  public data class OnRepository(
    public val id: String,
    /**
     * The name of the repository.
     */
    public val name: String,
    /**
     * Identifies the date and time when the object was created.
     */
    public val createdAt: Any,
    /**
     * The description of the repository.
     */
    public val description: String?,
    /**
     * Returns a count of how many stargazers there are on this object
     */
    public val stargazerCount: Int,
    /**
     * Identifies if the repository is private or internal.
     */
    public val isPrivate: Boolean,
    /**
     * Identifies if the repository is a fork.
     */
    public val isFork: Boolean,
    /**
     * Returns how many forks there are of this repository in the whole network.
     */
    public val forkCount: Int,
    /**
     * The HTTP URL for this repository
     */
    public val url: Any,
    /**
     * Returns a boolean indicating whether the viewing user has starred this starrable.
     */
    public val viewerHasStarred: Boolean,
    /**
     * The HTTP path for this repository
     */
    public val resourcePath: Any,
    /**
     * The User owner of the repository.
     */
    public val owner: Owner,
    /**
     * A list containing a breakdown of the language composition of the repository.
     */
    public val languages: Languages?
  )

  public data class Owner(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on User
     */
    public val onUser: OnUser?
  )

  public data class OnUser(
    public val id: String,
    /**
     * A URL pointing to the user's public avatar.
     */
    public val avatarUrl: Any,
    /**
     * The username used to login.
     */
    public val login: String,
    /**
     * The user's public profile name.
     */
    public val name: String?
  )

  public data class Languages(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int,
    /**
     * A list of nodes.
     */
    public val nodes: List<Node2?>?
  ) {
    public fun nodesFilterNotNull(): List<Node2>? = nodes?.filterNotNull()
  }

  public data class Node2(
    public val id: String,
    /**
     * The name of the current language.
     */
    public val name: String,
    /**
     * The color defined for the current language.
     */
    public val color: String?
  )

  public data class Repositories(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int,
    /**
     * A list of nodes.
     */
    public val nodes: List<Node3?>?
  ) {
    public fun nodesFilterNotNull(): List<Node3>? = nodes?.filterNotNull()
  }

  public data class Node3(
    public val id: String,
    /**
     * The name of the repository.
     */
    public val name: String,
    /**
     * Identifies the date and time when the object was created.
     */
    public val createdAt: Any,
    /**
     * The description of the repository.
     */
    public val description: String?,
    /**
     * Returns a count of how many stargazers there are on this object
     */
    public val stargazerCount: Int,
    /**
     * Identifies if the repository is private or internal.
     */
    public val isPrivate: Boolean,
    /**
     * Identifies if the repository is a fork.
     */
    public val isFork: Boolean,
    /**
     * Returns how many forks there are of this repository in the whole network.
     */
    public val forkCount: Int,
    /**
     * The HTTP URL for this repository
     */
    public val url: Any,
    /**
     * Returns a boolean indicating whether the viewing user has starred this starrable.
     */
    public val viewerHasStarred: Boolean,
    /**
     * The HTTP path for this repository
     */
    public val resourcePath: Any,
    /**
     * The User owner of the repository.
     */
    public val owner: Owner1,
    /**
     * A list containing a breakdown of the language composition of the repository.
     */
    public val languages: Languages1?
  )

  public data class Owner1(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on User
     */
    public val onUser: OnUser1?
  )

  public data class OnUser1(
    public val id: String,
    /**
     * A URL pointing to the user's public avatar.
     */
    public val avatarUrl: Any,
    /**
     * The username used to login.
     */
    public val login: String,
    /**
     * The user's public profile name.
     */
    public val name: String?
  )

  public data class Languages1(
    /**
     * Identifies the total count of items in the connection.
     */
    public val totalCount: Int,
    /**
     * A list of nodes.
     */
    public val nodes: List<Node4?>?
  ) {
    public fun nodesFilterNotNull(): List<Node4>? = nodes?.filterNotNull()
  }

  public data class Node4(
    public val id: String,
    /**
     * The name of the current language.
     */
    public val name: String,
    /**
     * The color defined for the current language.
     */
    public val color: String?
  )

  public companion object {
    public const val OPERATION_ID: String =
        "00aa9e65add1a12b08e5bb385642e29a0332b02e766a457baf74850c9ca5a918"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query LoggedInUserProfile($organizationsCount: Int, $pinnedReposCount: Int, $languagesCount:
     * Int, $reposCount: Int, $isFork: Boolean) {
     *   viewer {
     *     id
     *     email
     *     name
     *     login
     *     avatarUrl
     *     bio
     *     websiteUrl
     *     company
     *     location
     *     twitterUsername
     *     followers {
     *       totalCount
     *     }
     *     following {
     *       totalCount
     *     }
     *     isFollowingViewer
     *     isViewer
     *     isCampusExpert
     *     createdAt
     *     organizations(first: $organizationsCount) {
     *       nodes {
     *         id
     *         name
     *         avatarUrl
     *       }
     *     }
     *     pinnedItems(first: $pinnedReposCount) {
     *       totalCount
     *       nodes {
     *         __typename
     *         ... on Repository {
     *           id
     *           name
     *           createdAt
     *           description
     *           stargazerCount
     *           isPrivate
     *           isFork
     *           forkCount
     *           url
     *           viewerHasStarred
     *           resourcePath
     *           owner {
     *             __typename
     *             ... on User {
     *               id
     *               avatarUrl
     *               login
     *               name
     *             }
     *           }
     *           languages(first: $languagesCount) {
     *             totalCount
     *             nodes {
     *               id
     *               name
     *               color
     *             }
     *           }
     *         }
     *       }
     *     }
     *     repositories(first: $reposCount, isFork: $isFork) {
     *       totalCount
     *       nodes {
     *         id
     *         name
     *         createdAt
     *         description
     *         stargazerCount
     *         isPrivate
     *         isFork
     *         forkCount
     *         url
     *         viewerHasStarred
     *         resourcePath
     *         owner {
     *           __typename
     *           ... on User {
     *             id
     *             avatarUrl
     *             login
     *             name
     *           }
     *         }
     *         languages(first: $languagesCount) {
     *           totalCount
     *           nodes {
     *             id
     *             name
     *             color
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     */
    public const val OPERATION_DOCUMENT: String =
        "query LoggedInUserProfile(${'$'}organizationsCount: Int, ${'$'}pinnedReposCount: Int, ${'$'}languagesCount: Int, ${'$'}reposCount: Int, ${'$'}isFork: Boolean) { viewer { id email name login avatarUrl bio websiteUrl company location twitterUsername followers { totalCount } following { totalCount } isFollowingViewer isViewer isCampusExpert createdAt organizations(first: ${'$'}organizationsCount) { nodes { id name avatarUrl } } pinnedItems(first: ${'$'}pinnedReposCount) { totalCount nodes { __typename ... on Repository { id name createdAt description stargazerCount isPrivate isFork forkCount url viewerHasStarred resourcePath owner { __typename ... on User { id avatarUrl login name } } languages(first: ${'$'}languagesCount) { totalCount nodes { id name color } } } } } repositories(first: ${'$'}reposCount, isFork: ${'$'}isFork) { totalCount nodes { id name createdAt description stargazerCount isPrivate isFork forkCount url viewerHasStarred resourcePath owner { __typename ... on User { id avatarUrl login name } } languages(first: ${'$'}languagesCount) { totalCount nodes { id name color } } } } } }"

    public const val OPERATION_NAME: String = "LoggedInUserProfile"
  }
}
