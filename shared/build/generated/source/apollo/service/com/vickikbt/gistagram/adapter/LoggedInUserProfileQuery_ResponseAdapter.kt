//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.vickikbt.gistagram.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.vickikbt.gistagram.LoggedInUserProfileQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object LoggedInUserProfileQuery_ResponseAdapter {
  public object Data : Adapter<LoggedInUserProfileQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("viewer")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Data {
      var viewer: LoggedInUserProfileQuery.Viewer? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> viewer = Viewer.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Data(
        viewer = viewer!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Data
    ): Unit {
      writer.name("viewer")
      Viewer.obj().toJson(writer, customScalarAdapters, value.viewer)
    }
  }

  public object Viewer : Adapter<LoggedInUserProfileQuery.Viewer> {
    public val RESPONSE_NAMES: List<String> = listOf("bio", "company", "email", "followers",
        "following")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Viewer {
      var bio: String? = null
      var company: String? = null
      var email: String? = null
      var followers: LoggedInUserProfileQuery.Followers? = null
      var following: LoggedInUserProfileQuery.Following? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> bio = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> company = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> email = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> followers = Followers.obj().fromJson(reader, customScalarAdapters)
          4 -> following = Following.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Viewer(
        bio = bio,
        company = company,
        email = email!!,
        followers = followers!!,
        following = following!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Viewer
    ): Unit {
      writer.name("bio")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.bio)

      writer.name("company")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.company)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)

      writer.name("followers")
      Followers.obj().toJson(writer, customScalarAdapters, value.followers)

      writer.name("following")
      Following.obj().toJson(writer, customScalarAdapters, value.following)
    }
  }

  public object Followers : Adapter<LoggedInUserProfileQuery.Followers> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Followers {
      var totalCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Followers(
        totalCount = totalCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Followers
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)
    }
  }

  public object Following : Adapter<LoggedInUserProfileQuery.Following> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Following {
      var totalCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Following(
        totalCount = totalCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Following
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)
    }
  }
}
