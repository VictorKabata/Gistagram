//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.vickikbt.gistagram.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.vickikbt.gistagram.LoggedInUserProfileQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object LoggedInUserProfileQuery_ResponseAdapter {
  public object Data : Adapter<LoggedInUserProfileQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("viewer")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Data {
      var viewer: LoggedInUserProfileQuery.Viewer? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> viewer = Viewer.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Data(
        viewer = viewer!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Data
    ): Unit {
      writer.name("viewer")
      Viewer.obj().toJson(writer, customScalarAdapters, value.viewer)
    }
  }

  public object Viewer : Adapter<LoggedInUserProfileQuery.Viewer> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "email", "name", "login", "avatarUrl",
        "bio", "websiteUrl", "company", "location", "twitterUsername", "followers", "following",
        "isFollowingViewer", "isViewer", "isCampusExpert", "createdAt", "organizations",
        "pinnedItems", "repositories")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Viewer {
      var id: String? = null
      var email: String? = null
      var name: String? = null
      var login: String? = null
      var avatarUrl: Any? = null
      var bio: String? = null
      var websiteUrl: Any? = null
      var company: String? = null
      var location: String? = null
      var twitterUsername: String? = null
      var followers: LoggedInUserProfileQuery.Followers? = null
      var following: LoggedInUserProfileQuery.Following? = null
      var isFollowingViewer: Boolean? = null
      var isViewer: Boolean? = null
      var isCampusExpert: Boolean? = null
      var createdAt: Any? = null
      var organizations: LoggedInUserProfileQuery.Organizations? = null
      var pinnedItems: LoggedInUserProfileQuery.PinnedItems? = null
      var repositories: LoggedInUserProfileQuery.Repositories? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> email = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> login = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> avatarUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          5 -> bio = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          6 -> websiteUrl = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          7 -> company = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          8 -> location = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          9 -> twitterUsername = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          10 -> followers = Followers.obj().fromJson(reader, customScalarAdapters)
          11 -> following = Following.obj().fromJson(reader, customScalarAdapters)
          12 -> isFollowingViewer = BooleanAdapter.fromJson(reader, customScalarAdapters)
          13 -> isViewer = BooleanAdapter.fromJson(reader, customScalarAdapters)
          14 -> isCampusExpert = BooleanAdapter.fromJson(reader, customScalarAdapters)
          15 -> createdAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          16 -> organizations = Organizations.obj().fromJson(reader, customScalarAdapters)
          17 -> pinnedItems = PinnedItems.obj().fromJson(reader, customScalarAdapters)
          18 -> repositories = Repositories.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Viewer(
        id = id!!,
        email = email!!,
        name = name,
        login = login!!,
        avatarUrl = avatarUrl!!,
        bio = bio,
        websiteUrl = websiteUrl,
        company = company,
        location = location,
        twitterUsername = twitterUsername,
        followers = followers!!,
        following = following!!,
        isFollowingViewer = isFollowingViewer!!,
        isViewer = isViewer!!,
        isCampusExpert = isCampusExpert!!,
        createdAt = createdAt!!,
        organizations = organizations!!,
        pinnedItems = pinnedItems!!,
        repositories = repositories!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Viewer
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)

      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)

      writer.name("avatarUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatarUrl)

      writer.name("bio")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.bio)

      writer.name("websiteUrl")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.websiteUrl)

      writer.name("company")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.company)

      writer.name("location")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.location)

      writer.name("twitterUsername")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.twitterUsername)

      writer.name("followers")
      Followers.obj().toJson(writer, customScalarAdapters, value.followers)

      writer.name("following")
      Following.obj().toJson(writer, customScalarAdapters, value.following)

      writer.name("isFollowingViewer")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFollowingViewer)

      writer.name("isViewer")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isViewer)

      writer.name("isCampusExpert")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isCampusExpert)

      writer.name("createdAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.createdAt)

      writer.name("organizations")
      Organizations.obj().toJson(writer, customScalarAdapters, value.organizations)

      writer.name("pinnedItems")
      PinnedItems.obj().toJson(writer, customScalarAdapters, value.pinnedItems)

      writer.name("repositories")
      Repositories.obj().toJson(writer, customScalarAdapters, value.repositories)
    }
  }

  public object Followers : Adapter<LoggedInUserProfileQuery.Followers> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Followers {
      var totalCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Followers(
        totalCount = totalCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Followers
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)
    }
  }

  public object Following : Adapter<LoggedInUserProfileQuery.Following> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Following {
      var totalCount: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Following(
        totalCount = totalCount!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Following
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)
    }
  }

  public object Organizations : Adapter<LoggedInUserProfileQuery.Organizations> {
    public val RESPONSE_NAMES: List<String> = listOf("nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Organizations {
      var nodes: List<LoggedInUserProfileQuery.Node?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> nodes = Node.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Organizations(
        nodes = nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Organizations
    ): Unit {
      writer.name("nodes")
      Node.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node : Adapter<LoggedInUserProfileQuery.Node> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "avatarUrl")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Node {
      var id: String? = null
      var name: String? = null
      var avatarUrl: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> avatarUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Node(
        id = id!!,
        name = name,
        avatarUrl = avatarUrl!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Node
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("avatarUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatarUrl)
    }
  }

  public object PinnedItems : Adapter<LoggedInUserProfileQuery.PinnedItems> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount", "nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.PinnedItems {
      var totalCount: Int? = null
      var nodes: List<LoggedInUserProfileQuery.Node1?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> nodes = Node1.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.PinnedItems(
        totalCount = totalCount!!,
        nodes = nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.PinnedItems
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

      writer.name("nodes")
      Node1.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node1 : Adapter<LoggedInUserProfileQuery.Node1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Node1 {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var onRepository: LoggedInUserProfileQuery.OnRepository? = null
      if (possibleTypes("Repository").evaluate(customScalarAdapters.variables(), __typename)) {
        onRepository = com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnRepository.fromJson(reader,
            customScalarAdapters)
      }

      return LoggedInUserProfileQuery.Node1(
        __typename = __typename,
        onRepository = onRepository
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Node1
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onRepository != null) {
        com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnRepository.toJson(writer,
            customScalarAdapters, value.onRepository)
      }
    }
  }

  public object OnRepository : Adapter<LoggedInUserProfileQuery.OnRepository> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "createdAt", "description",
        "stargazerCount", "isPrivate", "isFork", "forkCount", "url", "viewerHasStarred",
        "resourcePath", "owner", "languages")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.OnRepository {
      var id: String? = null
      var name: String? = null
      var createdAt: Any? = null
      var description: String? = null
      var stargazerCount: Int? = null
      var isPrivate: Boolean? = null
      var isFork: Boolean? = null
      var forkCount: Int? = null
      var url: Any? = null
      var viewerHasStarred: Boolean? = null
      var resourcePath: Any? = null
      var owner: LoggedInUserProfileQuery.Owner? = null
      var languages: LoggedInUserProfileQuery.Languages? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> createdAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> description = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> stargazerCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> isPrivate = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> isFork = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> forkCount = IntAdapter.fromJson(reader, customScalarAdapters)
          8 -> url = AnyAdapter.fromJson(reader, customScalarAdapters)
          9 -> viewerHasStarred = BooleanAdapter.fromJson(reader, customScalarAdapters)
          10 -> resourcePath = AnyAdapter.fromJson(reader, customScalarAdapters)
          11 -> owner = Owner.obj(true).fromJson(reader, customScalarAdapters)
          12 -> languages = Languages.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.OnRepository(
        id = id!!,
        name = name!!,
        createdAt = createdAt!!,
        description = description,
        stargazerCount = stargazerCount!!,
        isPrivate = isPrivate!!,
        isFork = isFork!!,
        forkCount = forkCount!!,
        url = url!!,
        viewerHasStarred = viewerHasStarred!!,
        resourcePath = resourcePath!!,
        owner = owner!!,
        languages = languages
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.OnRepository
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("createdAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.createdAt)

      writer.name("description")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("stargazerCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.stargazerCount)

      writer.name("isPrivate")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isPrivate)

      writer.name("isFork")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFork)

      writer.name("forkCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.forkCount)

      writer.name("url")
      AnyAdapter.toJson(writer, customScalarAdapters, value.url)

      writer.name("viewerHasStarred")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.viewerHasStarred)

      writer.name("resourcePath")
      AnyAdapter.toJson(writer, customScalarAdapters, value.resourcePath)

      writer.name("owner")
      Owner.obj(true).toJson(writer, customScalarAdapters, value.owner)

      writer.name("languages")
      Languages.obj().nullable().toJson(writer, customScalarAdapters, value.languages)
    }
  }

  public object Owner : Adapter<LoggedInUserProfileQuery.Owner> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Owner {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var onUser: LoggedInUserProfileQuery.OnUser? = null
      if (possibleTypes("User").evaluate(customScalarAdapters.variables(), __typename)) {
        onUser = com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnUser.fromJson(reader,
            customScalarAdapters)
      }

      return LoggedInUserProfileQuery.Owner(
        __typename = __typename,
        onUser = onUser
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Owner
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onUser != null) {
        com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnUser.toJson(writer,
            customScalarAdapters, value.onUser)
      }
    }
  }

  public object OnUser : Adapter<LoggedInUserProfileQuery.OnUser> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "avatarUrl", "login", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.OnUser {
      var id: String? = null
      var avatarUrl: Any? = null
      var login: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> avatarUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> login = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.OnUser(
        id = id!!,
        avatarUrl = avatarUrl!!,
        login = login!!,
        name = name
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.OnUser
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("avatarUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatarUrl)

      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)

      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }

  public object Languages : Adapter<LoggedInUserProfileQuery.Languages> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount", "nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Languages {
      var totalCount: Int? = null
      var nodes: List<LoggedInUserProfileQuery.Node2?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> nodes = Node2.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Languages(
        totalCount = totalCount!!,
        nodes = nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Languages
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

      writer.name("nodes")
      Node2.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node2 : Adapter<LoggedInUserProfileQuery.Node2> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "color")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Node2 {
      var id: String? = null
      var name: String? = null
      var color: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> color = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Node2(
        id = id!!,
        name = name!!,
        color = color
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Node2
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("color")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.color)
    }
  }

  public object Repositories : Adapter<LoggedInUserProfileQuery.Repositories> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount", "nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Repositories {
      var totalCount: Int? = null
      var nodes: List<LoggedInUserProfileQuery.Node3?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> nodes = Node3.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Repositories(
        totalCount = totalCount!!,
        nodes = nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Repositories
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

      writer.name("nodes")
      Node3.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node3 : Adapter<LoggedInUserProfileQuery.Node3> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "createdAt", "description",
        "stargazerCount", "isPrivate", "isFork", "forkCount", "url", "viewerHasStarred",
        "resourcePath", "owner", "languages")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Node3 {
      var id: String? = null
      var name: String? = null
      var createdAt: Any? = null
      var description: String? = null
      var stargazerCount: Int? = null
      var isPrivate: Boolean? = null
      var isFork: Boolean? = null
      var forkCount: Int? = null
      var url: Any? = null
      var viewerHasStarred: Boolean? = null
      var resourcePath: Any? = null
      var owner: LoggedInUserProfileQuery.Owner1? = null
      var languages: LoggedInUserProfileQuery.Languages1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> createdAt = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> description = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> stargazerCount = IntAdapter.fromJson(reader, customScalarAdapters)
          5 -> isPrivate = BooleanAdapter.fromJson(reader, customScalarAdapters)
          6 -> isFork = BooleanAdapter.fromJson(reader, customScalarAdapters)
          7 -> forkCount = IntAdapter.fromJson(reader, customScalarAdapters)
          8 -> url = AnyAdapter.fromJson(reader, customScalarAdapters)
          9 -> viewerHasStarred = BooleanAdapter.fromJson(reader, customScalarAdapters)
          10 -> resourcePath = AnyAdapter.fromJson(reader, customScalarAdapters)
          11 -> owner = Owner1.obj(true).fromJson(reader, customScalarAdapters)
          12 -> languages = Languages1.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Node3(
        id = id!!,
        name = name!!,
        createdAt = createdAt!!,
        description = description,
        stargazerCount = stargazerCount!!,
        isPrivate = isPrivate!!,
        isFork = isFork!!,
        forkCount = forkCount!!,
        url = url!!,
        viewerHasStarred = viewerHasStarred!!,
        resourcePath = resourcePath!!,
        owner = owner!!,
        languages = languages
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Node3
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("createdAt")
      AnyAdapter.toJson(writer, customScalarAdapters, value.createdAt)

      writer.name("description")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.description)

      writer.name("stargazerCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.stargazerCount)

      writer.name("isPrivate")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isPrivate)

      writer.name("isFork")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.isFork)

      writer.name("forkCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.forkCount)

      writer.name("url")
      AnyAdapter.toJson(writer, customScalarAdapters, value.url)

      writer.name("viewerHasStarred")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.viewerHasStarred)

      writer.name("resourcePath")
      AnyAdapter.toJson(writer, customScalarAdapters, value.resourcePath)

      writer.name("owner")
      Owner1.obj(true).toJson(writer, customScalarAdapters, value.owner)

      writer.name("languages")
      Languages1.obj().nullable().toJson(writer, customScalarAdapters, value.languages)
    }
  }

  public object Owner1 : Adapter<LoggedInUserProfileQuery.Owner1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Owner1 {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var onUser: LoggedInUserProfileQuery.OnUser1? = null
      if (possibleTypes("User").evaluate(customScalarAdapters.variables(), __typename)) {
        onUser = com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnUser1.fromJson(reader,
            customScalarAdapters)
      }

      return LoggedInUserProfileQuery.Owner1(
        __typename = __typename,
        onUser = onUser
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Owner1
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.onUser != null) {
        com.vickikbt.gistagram.adapter.LoggedInUserProfileQuery_ResponseAdapter.OnUser1.toJson(writer,
            customScalarAdapters, value.onUser)
      }
    }
  }

  public object OnUser1 : Adapter<LoggedInUserProfileQuery.OnUser1> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "avatarUrl", "login", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.OnUser1 {
      var id: String? = null
      var avatarUrl: Any? = null
      var login: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> avatarUrl = AnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> login = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.OnUser1(
        id = id!!,
        avatarUrl = avatarUrl!!,
        login = login!!,
        name = name
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.OnUser1
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("avatarUrl")
      AnyAdapter.toJson(writer, customScalarAdapters, value.avatarUrl)

      writer.name("login")
      StringAdapter.toJson(writer, customScalarAdapters, value.login)

      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }

  public object Languages1 : Adapter<LoggedInUserProfileQuery.Languages1> {
    public val RESPONSE_NAMES: List<String> = listOf("totalCount", "nodes")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Languages1 {
      var totalCount: Int? = null
      var nodes: List<LoggedInUserProfileQuery.Node4?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> totalCount = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> nodes = Node4.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Languages1(
        totalCount = totalCount!!,
        nodes = nodes
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Languages1
    ): Unit {
      writer.name("totalCount")
      IntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

      writer.name("nodes")
      Node4.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.nodes)
    }
  }

  public object Node4 : Adapter<LoggedInUserProfileQuery.Node4> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "color")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        LoggedInUserProfileQuery.Node4 {
      var id: String? = null
      var name: String? = null
      var color: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> color = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return LoggedInUserProfileQuery.Node4(
        id = id!!,
        name = name!!,
        color = color
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: LoggedInUserProfileQuery.Node4
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("color")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.color)
    }
  }
}
